@*@{Layout = "_LyIndex";}*@
@using MyErp.Models
@model TWorkCenter
@using MyErp.Resources
@using MyErp.Extensions
@inject LocService SharedLocalizer

@functions {

    string parqsaction(int panem , int vassign, string toremove)
    {
        //deja el ultimo parametroa rellenar con el Id de la tabla en el javascript del control grid
        string ret ="id="+Model.WcdId.ToString()+"&panem="+panem.ToString()+"&assign="+vassign.ToString()+"&wass=0&"+toremove+"=";
        //{ id= @Model.WcdId, wrem = 0, panem=1,wass=1,assign =1}
        //new { id= c.WcoWcid, assign =1,wrem = c.WcoId, wass=0,panem=1}
        return ret;
    }

    string [] Controller(string table){
        string [] retur = new string [4];
        switch (table)
        {
        case "WCComp":
                retur[0]="TEngine";
                retur[1]="";
                retur[2]="";
                retur[3]="WCeEdit"; //elimina la asignacion por metodo Delete en el la accion edit del controllardor
                break;
        case "WCOper":
                retur[0]="TEngine";
                retur[1]="";
                retur[2]="";
                retur[3]="WCeEdit"; //elimina la asignacion por metodo Delete en el la accion edit del controllardor
                break;
        default:
            break;
        }
        return retur;
    }
    List<string> addLine(string field, string ledit){
        List<string> retLin = new List<string>();
        retLin.Add(field);
        retLin.Add(ledit);
        return retLin;
    }
    List<List<string>>  Fields(string table){
        List<List<string>> retur = new List<List<string>>();
        switch (table)
        {
            case "WCComp":
                retur.Add(addLine("WcoId","false"));
                retur.Add(addLine("WcoCode","false"));
                retur.Add(addLine("WcoDescr","true"));
                retur.Add(addLine("WcoType","false"));
                break;
            case "WCOper":
                retur.Add(addLine("OpOpId","false"));
                retur.Add(addLine("OpOpCode","false"));
                retur.Add(addLine("OpOpDes","true"));
                retur.Add(addLine("OpOpCost","false"));
                retur.Add(addLine("OpOPCurcy","false"));
                retur.Add(addLine("OpOpNum","false"));
                break;
            default:
                break;
        }
        return retur;
    }
    List<string> Columns(string table){
        List<string> retur = new List<string>();
        switch (table)
        {
            case "WCComp":
                    retur.Add("WCComp");
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Code"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Descr"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Type"));
                break;
            case "WCOper":
                    retur.Add("WCOper");
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Code"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Descr"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Cost"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Curcy"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("NOper"));
                break;
            default:
                break;
        }
        return retur;
    }
    IEnumerable<Container> getData_WCComp(dynamic oTMaterial)
        {
            IEnumerable<TWccomponent> fTPersonal = (List<TWccomponent>)oTMaterial;
            IEnumerable<Container> TPersonal = fTPersonal.Select(
                f => new Container() 
                {
                        CampoId = f.WcoId,
                        Campo01 = f.WcoCode.ToString(),
                        Campo02 = f.WcoDescr.ToString(),
                        Campo03 = f.WcoType.ToString(),
                        Campo04 = "",
                        Campo05 = "",
                        Campo06 = "",
                        Campo07 = "",
                        Campo08 = "",
                        Campo09 = "",
                        Campo10 = "",
                        Campo11 = "",
                        Campo12 = "",
                        Campo13 = "",
                        Campo14 = "",
                        Campo15 = ""
                });
            return TPersonal;
        }

    IEnumerable<Container> getData_WCOper(dynamic oTMaterial)
        {
            IEnumerable<VTWOperator> fTPersonal = (List<VTWOperator>)oTMaterial;
            IEnumerable<Container> TPersonal = fTPersonal.Select(
                f => new Container() 
                {
                        CampoId = f.OpOpId,
                        Campo01 = f.OpOpCode.ToString(),
                        Campo02 = f.OpOpDes.ToString(),
                        Campo03 = f.OpOpCost.ToString(),
                        Campo04 = f.OpOPCurcy.ToString(),
                        Campo05 = f.OpOpNum.ToString(),
                        Campo06 = "",
                        Campo07 = "",
                        Campo08 = "",
                        Campo09 = "",
                        Campo10 = "",
                        Campo11 = "",
                        Campo12 = "",
                        Campo13 = "",
                        Campo14 = "",
                        Campo15 = ""
                });
            return TPersonal;
        }

    string isVisible(int panel){
        string retcol="";
        int opanel = (int)ViewData["panel"];
        if (opanel==panel){retcol="visible";}
        else{retcol="invisible";}
        return retcol;
    }
    string isVisibleM(int panem){
        string retcol="";
        int opanem =0;
        try{
        opanem = (int)ViewData["panem"];
        }
        catch{}
        if (opanem==panem){retcol="visible";}
        else{retcol="invisible";}
        return retcol;
    }
    private int VPanem(){
        int opanem =0;
        try{
        opanem = (int)ViewData["panem"];
        }
        catch{}
        return opanem;
    }

    string assVisible(int panem)
    {
        string retcol="invisible";
        try{
        if ((int)ViewData["panem"]==panem)  //Assign
        {retcol="visible";}
        }
        catch{}
        return retcol;
    }
    private int VAssign(){
        int resul = 0;
        try{
        resul=(int)ViewData["panem"];       //Assign
        }
        catch{}
        return resul;
    }
}
<script>
    function AddWCcompo(modulo,assign)
    {
        //asigna nuevo componente (panem)
        var nv = document.getElementById("_noper").value;
        var e = document.getElementById(modulo);
        var value = e.options[e.selectedIndex].WcoId;
        var url=window.location.href.split("?")[0];
        url=url+"?"+e.name+"="+e.value.toString()+"&wass=1&wrem=0&assign="+assign.toString()+"&panem="+assign.toString()+"&opnum="+nv.toString();
        window.location.href = url;

    }
</script>
<div class=" clearfix position-relative o_form_sheet center">

@Html.Partial("_pmenuWCe_com")
@using (Html.BeginForm("WCeEdit","TEngine", new { id= @Model.WcdId, wrem = 0,panem=@VPanem(), wass=0,assign=@VAssign()})) {
    <div class="div-edit">
    @*@Html.HiddenFor(p => p.WcdId)*@
    @Html.ValidationSummary(true)
    <table class="table-edit">
         <tr>
            <td><input type="submit" class="dropbtn" value="Update"  name="actionType"/></td>
            <td><input type="submit" class="dropbtn" value="Cancel" name="actionType"/></td>
        </tr>
        @Html.Partial("_pshowWorkCenters",Model)
    </table>
    </div>


<div class=@isVisibleM(1)>
    <table class="table-norm" border="1">
        <div class="cont-titles">
            <h3>@SharedLocalizer.GetLocalizedHtmlString("WcRolesToAss")</h3>
        </div>
        <table>
            <tr>
                <td class="norm-lab-text">@SharedLocalizer.GetLocalizedHtmlString("NumOperators")</td>
                <td class="norm-text">
                    <input type="text" class="norm-tb-text" id="_noper" name="noper" value ="" size ="4">              
                </td>
                <td class="norm-lab-text">@SharedLocalizer.GetLocalizedHtmlString("WCRolesToAss")</td>
                <td class="norm-text">
                    @Html.DropDownList("OpeId", (SelectList)ViewBag.ddlPodOPS, new {@id ="myselectop", @class ="norm-tb-text" , onchange ="AddWCcompo('myselectop',1);" })
                </td>
            </tr>
        </table>
        @Html.dataGrid(33,7,@Columns("WCOper"),@getData_WCOper((List<VTWOperator>)ViewBag.ListOpdAs),@Controller("WCOper"),@Fields("WCOper"),0,@parqsaction(1,1,"wrem"))
    </table>
</div>


<div class=@isVisibleM(2)>
    <table class="table-norm" border="1">
        <div class="cont-titles">
            <h3>@SharedLocalizer.GetLocalizedHtmlString("WcCompToAss")</h3>
        </div>
        <table>
            <tr>
                <td class="norm-lab-text">@SharedLocalizer.GetLocalizedHtmlString("WCToAssign")</td>
                <td class="norm-text">
                    @Html.DropDownList("WcoId", (SelectList)ViewBag.ddlPodNAS, new {@id ="myselect", @class ="norm-tb-text" , onchange ="AddWCcompo('myselect',2);" })
                </td>
            </tr>
        </table>
        @Html.dataGrid(34,7,@Columns("WCComp"),@getData_WCComp((List<TWccomponent>)ViewBag.ListPodAs),@Controller("WCComp"),@Fields("WCComp"),0,@parqsaction(2,2,"wrem"))
    </table>
</div>

}
</div>