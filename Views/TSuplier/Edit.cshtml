@using MyErp.Models
@using System.Linq;
@model TSuplier
@using MyErp.Extensions;
@using MyErp.Resources
@inject LocService SharedLocalizer
@{
    Layout = null;  
    Layout = "_LaySup.cshtml";
}

@functions {

    string [] Controller(string table){
        string [] retur = new string [4];
        switch (table)
        {
        case "Product":
                retur[0]="TSuplier";
                retur[1]="ProEdit";
                retur[2]="ProCreate";
                retur[3]="ProDelete";
                break;
        case "SPlan":
                retur[0]="TSuplier";
                retur[1]="PlanEdit";
                retur[2]="PlanCreate";
                retur[3]="PlanDelete";
                break;
        case "SPO":
                retur[0]="TSuplier";
                retur[1]="PoEdit";
                retur[2]="PoCreate";
                retur[3]="PoDelete";
                break;
        default:
            break;
        }
        return retur;
    }
    List<string> addLine(string field, string ledit){
        List<string> retLin = new List<string>();
        retLin.Add(field);
        retLin.Add(ledit);
        return retLin;
    }
    List<List<string>>  Fields(string table){
        List<List<string>> retur = new List<List<string>>();
        switch (table)
        {
            case "Product":
                retur.Add(addLine("ProdId","false"));
                retur.Add(addLine("ProdRefer","false"));
                retur.Add(addLine("ProdDescr","false"));
                retur.Add(addLine("ProdCrDate","true"));
                retur.Add(addLine("ProdStatus","true"));
                retur.Add(addLine("ProdStDate","true"));
                break;
            case "SPlan":
                retur.Add(addLine("PlanId","false"));
                retur.Add(addLine("MatRefer","false"));
                retur.Add(addLine("ProdRefer","false"));
                retur.Add(addLine("ProdDescr","true"));
                retur.Add(addLine("PlanDateFrom","true"));
                retur.Add(addLine("PlanDateTo","true"));
                retur.Add(addLine("PlanQty","true"));
                retur.Add(addLine("PlanFirmSt","true"));
                break;
            case "SPO":
                retur.Add(addLine("Spoid","false"));
                retur.Add(addLine("Spopo","false"));
                retur.Add(addLine("SprodRefInt","false"));
                retur.Add(addLine("SporeferEx","true"));
                retur.Add(addLine("SpodescEx","true"));
                retur.Add(addLine("Spoprice","true"));
                retur.Add(addLine("Spocurcy","true"));
                retur.Add(addLine("Spostatus","true"));
                retur.Add(addLine("SpoPcREp","true"));
                break;
            default:
                break;
        }
        return retur;
    }
    List<string> Columns(string table){
        List<string> retur = new List<string>();
        switch (table)
        {
            case "Product":
                    retur.Add("Product");
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Reference"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Descriptio"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Date Creation"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Status"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Date Status"));
                break;
            case "SPlan":
                    retur.Add("SPlan");
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("RefInt"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("RefExt"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Descr"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("FromDate"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("ToDate"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Qty"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("FirmStat"));
                break;
            case "SPO":
                    retur.Add("SPO");
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("PO"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("RefInt"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("RefEx"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("DescExt"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Price"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Curcy"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Status"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("PcRep"));
                break;
            default:
                break;
        }
        return retur;
    }
    IEnumerable<Container> getData_Product(dynamic oTMaterial)
        {
            IEnumerable<TSProduct> fTPersonal = (List<TSProduct>)oTMaterial;
            IEnumerable<Container> TPersonal = fTPersonal.Select(
                f => new Container() 
                {
                        CampoId = f.ProdId,
                        Campo01 = f.ProdRefer.ToString(),
                        Campo02 = f.ProdDescr.ToString(),
                        Campo03 = f.ProdCrDate.ToString(),
                        Campo04 = f.ProdStatus.ToString(),
                        Campo05 = f.ProdStDate.ToString(),
                        Campo06 = "", 
                        Campo07 = "",
                        Campo08 = "",
                        Campo09 = "",
                        Campo10 = "",
                        Campo11 = "",
                        Campo12 = "",
                        Campo13 = "",
                        Campo14 = "",
                        Campo15 = ""
                });
            return TPersonal;
        }
    IEnumerable<Container> getData_SPlan(dynamic oTMaterial)
        {
            IEnumerable<TSPlanningV> fTPersonal = (List<TSPlanningV>)oTMaterial;
            IEnumerable<Container> TPersonal = fTPersonal.Select(
                f => new Container() 
                {
                        CampoId = f.PlanId,
                        Campo01 = f.MatRefer.ToString(),
                        Campo02 = f.ProdRefer.ToString(),
                        Campo03 = f.ProdDescr.ToString(),
                        Campo04 = f.PlanDateFrom.ToString(),
                        Campo05 = f.PlanDateTo.ToString(),
                        Campo06 = f.PlanQty.ToString(),
                        Campo07 = f.PlanFirmSt.ToString(), 
                        Campo08 = "",
                        Campo09 = "",
                        Campo10 = "",
                        Campo11 = "",
                        Campo12 = "",
                        Campo13 = "",
                        Campo14 = "",
                        Campo15 = ""
                });
            return TPersonal;
        }

    IEnumerable<Container> getData_SPO(dynamic oTMaterial)
        {
            IEnumerable<VTSPorder> fTPersonal = (List<VTSPorder>)oTMaterial;
            IEnumerable<Container> TPersonal = fTPersonal.Select(
                f => new Container() 
                {
                        CampoId = f.Spoid,
                        Campo01 = f.Spopo.ToString(),
                        Campo02 = f.SprodRefInt.ToString(),
                        Campo03 = f.SporeferEx.ToString(),
                        Campo04 = f.SpodescEx.ToString(),
                        Campo05 = f.Spoprice.ToString(),
                        Campo06 = f.Spocurcy.ToString(), 
                        Campo07 = f.Spostatus.ToString(),
                        Campo08 = f.SpoPcRep.ToString(),
                        Campo09 = "",
                        Campo10 = "",
                        Campo11 = "",
                        Campo12 = "",
                        Campo13 = "",
                        Campo14 = "",
                        Campo15 = ""
                });
            return TPersonal;
        }

    string panelBold(int panel)
    {            
        int tpan = (int)ViewData["panel"];
        string cstyle ="";
        if (panel==tpan)
        {cstyle="font-weight:bold";}
        return cstyle;
    }

    string isVisible(int panel){
        string retcol="";
        int opanel = (int)ViewData["panel"];
        if (opanel==panel){retcol="visible";}
        else{retcol="invisible";}
        return retcol;
    }
    int thisPanel(){
         int opanel = (int)ViewData["panel"];
         return opanel;
    }
}
@using (Html.BeginForm()) {
    @Html.HiddenFor(p => p.SupId)

    <div class="@isVisible(1)">
    <div class="cont-titles">
        <h3 class="style-data">@SharedLocalizer.GetLocalizedHtmlString("SuplierData")</h3>
    </div>
    <div class="div-edit">
    <table class="table-edit">
        <tr>
            <td><input type="submit" class="dropbtn" value="Update" name="actionType"/></td>
            <td><input type="submit" class="dropbtn" value="Cancel"  name="actionType"/></td>
        </tr>
        <tr>
            <td>@Html.LabelFor(p => p.SupRasoc,new { @class = "norm-lab-text",})</td>
            <td>@Html.EditorFor(p => p.SupRasoc, new { htmlAttributes = new { @class = "norm-tb-text", @style = "width:320" } })</td>
        </tr>
        <tr>
            <td></td>
            <td>@Html.ValidationMessageFor(p => p.SupRasoc)</td>
        </tr>        
        <tr>
            <td>@Html.LabelFor(p => p.SupNif,new { @class = "norm-lab-text",})</td>
            <td>@Html.EditorFor(p => p.SupNif, new { htmlAttributes = new { @class = "norm-tb-text", @style = "width:90" } })</td>
        </tr>
        <tr>
            <td></td>
            <td>@Html.ValidationMessageFor(p => p.SupNif)</td>
        </tr>        
        <tr>
            <td>@Html.LabelFor(p => p.SupCrDate,new { @class = "norm-lab-text",})</td>
            <td>@Html.EditorFor(p => p.SupCrDate, new { htmlAttributes = new { @class = "norm-tb-text"} })</td>
        </tr>
        <tr>
            <td></td>
            <td>@Html.ValidationMessageFor(p => p.SupCrDate)</td>
        </tr>        
        <tr>
            <td>@Html.LabelFor(p => p.SupCode,new { @class = "norm-lab-text",})</td>
            <td>@Html.EditorFor(p => p.SupCode, new { htmlAttributes = new { @class = "norm-tb-text", @style = "width:150" } })</td>
        </tr>
        <tr>
            <td></td>
            <td>@Html.ValidationMessageFor(p => p.SupCode)</td>
        </tr>        
        <tr>
            <td>@Html.LabelFor(p => p.SupAdStrt,new { @class = "norm-lab-text",})</td>
            <td>@Html.EditorFor(p => p.SupAdStrt, new { htmlAttributes = new { @class = "norm-tb-text", @style = "width:350" } })</td>
            <td>@Html.LabelFor(p => p.SupAdCity,new { @class = "norm-lab-text",})</td>
            <td>@Html.EditorFor(p => p.SupAdCity, new { htmlAttributes = new { @class = "norm-tb-text", @style = "width:150" } })</td>
        </tr>
        <tr>
            <td></td>
            <td>@Html.ValidationMessageFor(p => p.SupAdStrt)</td>
            <td></td>
            <td>@Html.ValidationMessageFor(p => p.SupAdCity)</td>
        </tr>        
        <tr>
            <td>@Html.LabelFor(p => p.SupAdCtry,new { @class = "norm-lab-text",})</td>
            <td>
                @Html.DropDownListFor(p => p.SupAdCtry,
               new SelectList(DataSource.GetCountry(), "Code", "Name"),new { @class = "norm-tb-text" })
            </td>
            <td>@Html.LabelFor(p => p.SupCtPhone,new { @class = "norm-lab-text",})</td>
            <td>@Html.EditorFor(p => p.SupCtPhone, new { htmlAttributes = new { @class = "norm-tb-text", @style = "width:150" } })</td>
        </tr>
        <tr>
            <td></td>
            <td>@Html.ValidationMessageFor(p => p.SupAdCtry)</td>
            <td></td>
            <td>@Html.ValidationMessageFor(p => p.SupCtPhone)</td>
        </tr>        
        <tr>
            <td>@Html.LabelFor(p => p.SupCtEmailLog,new { @class = "norm-lab-text",})</td>
            <td>@Html.EditorFor(p => p.SupCtEmailLog, new { htmlAttributes = new { @class = "norm-tb-text", @style = "width:250" } })</td>
            <td>@Html.LabelFor(p => p.SupCtEdilog,new { @class = "norm-lab-text",})</td>
            <td>@Html.EditorFor(p => p.SupCtEdilog, new { htmlAttributes = new { @class = "norm-tb-text", @style = "width:250" } })</td>
        </tr>
        <tr>
            <td></td>
            <td>@Html.ValidationMessageFor(p => p.SupCtEmailLog)</td>
            <td></td>
            <td>@Html.ValidationMessageFor(p => p.SupCtEdilog)</td>
        </tr>        
    </table>
    </div>
    </div>
    <div class=@isVisible(2)>
        <table class="table-edit" border="1">
            <div class="cont-titles">
                <h3 class="style-data">@SharedLocalizer.GetLocalizedHtmlString("ProductData")</h3>
            </div>
            <div  class="_container" name="aqui-el-control-grid-3">
                @Html.dataGrid(24,9,@Columns("Product"),@getData_Product((List<TSProduct>)ViewBag.ListProd),@Controller("Product"),@Fields("Product"),Model.SupId)
            </div>
        </table>
    </div>

    <div class=@isVisible(3)>
        <table class="table-edit" border="1">
            <div class="cont-titles">
                <h3 class="style-data">@SharedLocalizer.GetLocalizedHtmlString("SupPlanningData")</h3>
            </div>
            <div  class="_container" name="aqui-el-control-grid-3">
                @Html.dataGrid(25,9,@Columns("SPlan"),@getData_SPlan((List<TSPlanningV>)ViewBag.ListPlan),@Controller("SPlan"),@Fields("SPlan"),Model.SupId)
            </div>
        </table>
    </div>

    <div class=@isVisible(4)>
        <input id="panel" name="panel" type="hidden" value="4">
        <table class="table-edit" border="1">
            <div class="cont-titles">
                <h3 class="style-data">@SharedLocalizer.GetLocalizedHtmlString("SupPlanningData")</h3>
            </div>
            <div  class="_container" name="aqui-el-control-grid-3">
                @Html.dataGrid(26,9,@Columns("SPO"),@getData_SPO((List<VTSPorder>)ViewBag.listSpo),@Controller("SPO"),@Fields("SPO"),Model.SupId)
            </div>
        </table>

    </div>    
}




