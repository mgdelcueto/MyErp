@*@{Layout = "_LyIndex";}*@
@using MyErp.Models
@using System.Linq;
@using MyErp.Extensions;
@using MyErp.Resources
@inject LocService SharedLocalizer

@functions {
    string isCode(){
        string  code ="";
        try{
        code = (string)ViewData["Code"];}
        catch{}
        return code;
    }


    string [] Controller(string table){
        string [] retur = new string [4];
        switch (table)
        {
        case "InputBLH":
                retur[0]="TLog";
                retur[1]="BlhEdit";
                retur[2]="BlhCreate";
                retur[3]="BlhDelete";
                break;
        case "WCenter":
                retur[0]="TEngine";
                retur[1]="WCeEdit";
                retur[2]="WCeCreate";
                retur[3]="WCeDelete";
                break;
        case "WCenterC":
                retur[0]="TEngine";
                retur[1]="WCoEdit";
                retur[2]="WCoCreate";
                retur[3]="WCoDelete";
                break;
        case "Materials":
                retur[0]="TEngine";
                retur[1]="MatEdit";
                retur[2]="MatCreate";
                retur[3]="MatDelete";
                break;
        case "SLocation":
                retur[0]="TEngine";
                retur[1]="LoEdit";
                retur[2]="LoCreate";
                retur[3]="LoDelete";
                break;
        case "Operators":
                retur[0]="TEngine";
                retur[1]="OphEdit";
                retur[2]="OphCreate";
                retur[3]="OphDelete";
                break;
        case "Trucks":
                retur[0]="TEngine";
                retur[1]="TrEdit";
                retur[2]="TrCreate";
                retur[3]="TrDelete";
                break;
        default:
            break;
        }
        return retur;
    }
    List<string> addLine(string field, string ledit){
        List<string> retLin = new List<string>();
        retLin.Add(field);
        retLin.Add(ledit);
        return retLin;
    }
    List<List<string>>  Fields(string table){
        List<List<string>> retur = new List<List<string>>();
        switch (table)
        {
            case "InputBLH":
                retur.Add(addLine("InBLDId","false"));
                retur.Add(addLine("CampoKy","false"));
                retur.Add(addLine("InBLStatus","false"));
                retur.Add(addLine("SupRasoc","false"));
                retur.Add(addLine("InBLnum","false"));
                retur.Add(addLine("InBLDateRec","false"));
                retur.Add(addLine("InBLObser","true"));
                break;
            default:
                break;
        }
        return retur;
    }
    List<string> Columns(string table){
        List<string> retur = new List<string>();
        switch (table)
        {
            case "InputBLH":
                    retur.Add("InputBLH");
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("InBLStatus"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("SupRasoc"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("InBLnum"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("InBLDateRec"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("InBLObser"));
                break;
            default:
                break;
        }
        return retur;
    }

    @*
    List<string> Columns(string table,int type){
        List<string> retur = new List<string>();
        switch (table)
        {
            case "InputBLH":
                if (type==0)
                {
                    retur.Add("InputBLH");
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("InBLStatus"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("SupRasoc"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("InBLnum"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("InBLDateRec"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("InBLObser"));
                }
                else{
                    retur.Add("InBLDId");
                    retur.Add("InBLStatus");
                    retur.Add("SupRasoc");
                    retur.Add("InBLnum");
                    retur.Add("InBLDateRec");
                    retur.Add("InBLObser");
                }
                break;
            case "WCenter":
                if (type==0)
                {
                    retur.Add("WCenter");
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("WCCode"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("WCDesc"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("WCType"));
                }
                else{
                    retur.Add("WcdId");
                    retur.Add("Wccode");
                    retur.Add("Wcdescr");
                    retur.Add("Wctype");
                }
                break;
            case "WCenterC":
                if (type==0)
                {
                    retur.Add("WCenterCo");
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Code"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Description"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Type"));
                }
                else{
                    retur.Add("WcoId");
                    retur.Add("WcoCode");
                    retur.Add("WcoDescr");
                    retur.Add("WcoType");
                }    
                break;
            case "Materials":
                if (type==0)
                {
                    retur.Add("Materials");
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("MatRefer"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("MatDescr"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("MatClass"));
                }
                else{
                    retur.Add("MatId");
                    retur.Add("MatRefer");
                    retur.Add("MatDescr");
                    retur.Add("MatClass");
                }
                break;
            case "SLocation":
                if (type==0)
                {
                    retur.Add("SLocation");
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("LocCode"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("LocDescr"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("LocType"));
                }
                else{
                    retur.Add("LocId");
                    retur.Add("LocCode");
                    retur.Add("LocDescr");
                    retur.Add("LocType");
                }
                break;
            case "Operators":
                if (type==0)
                {
                    retur.Add("Review");
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Code"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Descr"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Costh"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Curcy"));
                }
                else{
                    retur.Add("OpeId");
                    retur.Add("OpeCode");
                    retur.Add("OpeDesc");
                    retur.Add("OpeCosth");
                    retur.Add("OpeCurcy");
                }
                break;
            case "Trucks":
                if (type==0)
                {
                    retur.Add("Trucks");
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Code"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Deno"));
                }
                else{
                    retur.Add("TruckId");
                    retur.Add("TruckCode");
                    retur.Add("TruckDeno");
                }
                break;
            default:
                break;
        }
        return retur;
    }
    *@
    IEnumerable<Container> getData_InputBLH(dynamic oTMaterial)
        {
            IEnumerable<VTBLHead> fTPersonal = (List<VTBLHead>)oTMaterial;
            IEnumerable<Container> TPersonal = fTPersonal.Select(
                f => new Container() 
                {
                        CampoId = f.InBLId,
                        CampoKy = f.InBLId,
                        Campo01 = f.InBLStatus.ToString(),
                        Campo02 = (f.SupRasoc ??"").ToString(),
                        Campo03 = f.InBLnum.ToString(),
                        Campo04 = f.InBLDateRec.ToString(),
                        Campo05 = (f.InBLObser ?? "").ToString(),
                        Campo06 = "", 
                        Campo07 = "",
                        Campo08 = "",
                        Campo09 = "",
                        Campo10 = "",
                        Campo11 = "",
                        Campo12 = "",
                        Campo13 = "",
                        Campo14 = "",
                        Campo15 = ""
                });
            return TPersonal;
        }








@*


    IEnumerable<Container> getData_WCenter(dynamic oTMaterial)
        {
            IEnumerable<TWorkCenter> fTPersonal = (List<TWorkCenter>)oTMaterial;
            IEnumerable<Container> TPersonal = fTPersonal.Select(
                f => new Container() 
                {
                        CampoId = f.WcdId,
                        Campo01 = f.Wccode.ToString(),
                        Campo02 = f.Wcdescr.ToString(),
                        Campo03 = f.Wctype.ToString(),
                        Campo04 = "",
                        Campo05 = "",
                        Campo06 = "", 
                        Campo07 = "",
                        Campo08 = "",
                        Campo09 = "",
                        Campo10 = "",
                        Campo11 = "",
                        Campo12 = "",
                        Campo13 = "",
                        Campo14 = "",
                        Campo15 = ""
                });
            return TPersonal;
        }








    IEnumerable<Container> getData_WCenterC(dynamic oTMaterial)
        {
            IEnumerable<TWccomponent> fTPersonal = (List<TWccomponent>)oTMaterial;
            IEnumerable<Container> TPersonal = fTPersonal.Select(
                f => new Container() 
                {
                        CampoId = f.WcoId,
                        Campo01 = f.WcoCode.ToString(),
                        Campo02 = f.WcoDescr.ToString(),
                        Campo03 = f.WcoType.ToString(),
                        Campo04 = "",
                        Campo05 = "",
                        Campo06 = "", 
                        Campo07 = "",
                        Campo08 = "",
                        Campo09 = "",
                        Campo10 = "",
                        Campo11 = "",
                        Campo12 = "",
                        Campo13 = "",
                        Campo14 = "",
                        Campo15 = ""
                });
            return TPersonal;
        }









    IEnumerable<Container> getData_Materials(dynamic oTMaterial)
        {
            IEnumerable<TMaterial> fTPersonal = (List<TMaterial>)oTMaterial;
            IEnumerable<Container> TPersonal = fTPersonal.Select(
                f => new Container() 
                {
                        CampoId = f.MatId,
                        Campo01 = f.MatRefer.ToString(),
                        Campo02 = f.MatDescr.ToString(),
                        Campo03 = f.MatClass.ToString(),
                        Campo04 = "",
                        Campo05 = "",
                        Campo06 = "", 
                        Campo07 = "",
                        Campo08 = "",
                        Campo09 = "",
                        Campo10 = "",
                        Campo11 = "",
                        Campo12 = "",
                        Campo13 = "",
                        Campo14 = "",
                        Campo15 = ""
                });
            return TPersonal;
        }








    IEnumerable<Container> getData_SLocation(dynamic oTMaterial)
        {
            IEnumerable<TLocation> fTPersonal = (List<TLocation>)oTMaterial;
            IEnumerable<Container> TPersonal = fTPersonal.Select(
                f => new Container() 
                {
                        CampoId = f.LocId,
                        Campo01 = f.LocCode.ToString(),
                        Campo02 = f.LocDescr.ToString(),
                        Campo03 = f.LocType.ToString(),
                        Campo04 = "",
                        Campo05 = "",
                        Campo06 = "", 
                        Campo07 = "",
                        Campo08 = "",
                        Campo09 = "",
                        Campo10 = "",
                        Campo11 = "",
                        Campo12 = "",
                        Campo13 = "",
                        Campo14 = "",
                        Campo15 = ""
                });
            return TPersonal;
        }








    IEnumerable<Container> getData_Operators(dynamic oTMaterial)
        {
            IEnumerable<TOperator> fTPersonal = (List<TOperator>)oTMaterial;
            IEnumerable<Container> TPersonal = fTPersonal.Select(
                f => new Container() 
                {
                        CampoId = f.OpeId,
                        Campo01 = f.OpeCode.ToString(),
                        Campo02 = f.OpeDesc.ToString(),
                        Campo03 = f.OpeCosth.ToString(),
                        Campo04 = f.OpeCurcy.ToString(),
                        Campo05 = "",
                        Campo06 = "", 
                        Campo07 = "",
                        Campo08 = "",
                        Campo09 = "",
                        Campo10 = "",
                        Campo11 = "",
                        Campo12 = "",
                        Campo13 = "",
                        Campo14 = "",
                        Campo15 = ""
                });
            return TPersonal;
        }








    IEnumerable<Container> getData_Trucks(dynamic oTMaterial)
        {
            IEnumerable<TCTruck> fTPersonal = (List<TCTruck>)oTMaterial;
            IEnumerable<Container> TPersonal = fTPersonal.Select(
                f => new Container() 
                {
                        CampoId = f.TruckId,
                        Campo01 = f.TruckCode.ToString(),
                        Campo02 = f.TruckDeno.ToString(),
                        Campo03 = "",
                        Campo04 = "",
                        Campo05 = "",
                        Campo06 = "", 
                        Campo07 = "",
                        Campo08 = "",
                        Campo09 = "",
                        Campo10 = "",
                        Campo11 = "",
                        Campo12 = "",
                        Campo13 = "",
                        Campo14 = "",
                        Campo15 = ""
                });
            return TPersonal;
        }

*@






    string isVisible(int panel){
        string retcol="";
        int opanel = (int)ViewData["panel"];
        if (opanel==panel){retcol="visible";}
        else{retcol="invisible";}
        return retcol;
    }
    string errmsg()
    {
        string ret = (string)ViewData["ErrorMs"];
        return ret;
    }

}

    <div class=@isVisible(1)>
        <div class = "cont-titles">
            <h3>@SharedLocalizer.GetLocalizedHtmlString("GoodsReceiptNoteList")</h3>   
        </div>
        @Html.dataGrid(44,16,@Columns("InputBLH"),@getData_InputBLH((List<VTBLHead>)ViewBag.ListBL),@Controller("InputBLH"),@Fields("InputBLH"),0)
    </div>

    @*
    <div class=@isVisible(2)>
        <div class = "cont-titles">
            <h3>@SharedLocalizer.GetLocalizedHtmlString("WorkCenterList")</h3>   
        </div>
        @Html.dataGrid(11,16,@Columns("WCenter",0),@getData_WCenter((List<TWorkCenter>)ViewBag.ListProd),@Controller("WCenter"),@Columns("WCenter",1),0)
    </div>


    <div class=@isVisible(3)>
        <div class = "cont-titles">
            <h3>@SharedLocalizer.GetLocalizedHtmlString("WorkCenterCompList")</h3>   
        </div>
    <table>
            <td class="norm-lab-text">@SharedLocalizer.GetLocalizedHtmlString("SelectWorkCenter")</td>
            <td class="norm-text">
                @Html.DropDownList("WcdId", (SelectList)ViewBag.ddlReferVD, new { @class ="norm-tb-text" , onchange = "ddlfunc(3,'WcdId',this.value)"})
            </td>
    </table>
 
        @Html.dataGrid(12,16,@Columns("WCenterC",0),@getData_WCenterC((List<TWccomponent>)ViewBag.ListPO),@Controller("WCenterC"),@Columns("WCenterC",1),0)
    </div>

    <div class=@isVisible(4)>
        <div class = "cont-titles">
            <h3>@SharedLocalizer.GetLocalizedHtmlString("MaterialsList")</h3>   
        </div>
    <table>
            <td class="norm-lab-text">@SharedLocalizer.GetLocalizedHtmlString("MaterialClass")</td>
            <td class="norm-text">
                @Html.DropDownList("Code",
               new SelectList(DataSource.GetMCatlassL(), "Code", "Name",@isCode()),new { @class = "norm-tb-text", onchange = "ddlfunc(4,'code',this.value)" })
            </td>
    </table>
        @Html.dataGrid(13,16,@Columns("Materials",0),@getData_Materials((List<TMaterial>)ViewBag.ListMA),@Controller("Materials"),@Columns("Materials",1),0)
    </div>

    <div class=@isVisible(5)>
        <div class = "cont-titles">
            <h3>@SharedLocalizer.GetLocalizedHtmlString("StorageLocList")</h3>   
        </div>
        @Html.dataGrid(14,16,@Columns("SLocation",0),@getData_SLocation((List<TLocation>)ViewBag.ListLO),@Controller("SLocation"),@Columns("SLocation",1),0)
    </div>

    <div class=@isVisible(6)>
        <div class = "cont-titles">
            <h3>@SharedLocalizer.GetLocalizedHtmlString("OperatorList")</h3>   
        </div>
        @Html.dataGrid(15,16,@Columns("Operators",0),@getData_Operators((List<TOperator>)ViewBag.ListOP),@Controller("Operators"),@Columns("Operators",1),0)
    </div>

    <div class=@isVisible(7)>
        <div class = "cont-titles">
            <h3>@SharedLocalizer.GetLocalizedHtmlString("TrucksList")</h3>   
        </div>
        @Html.dataGrid(16,16,@Columns("Trucks",0),@getData_Trucks((List<TCTruck>)ViewBag.ListTruck),@Controller("Trucks"),@Columns("Trucks",1),0)
    </div>
    *@
    <div class=@isVisible(999)>
        <p>
            ERROR:@errmsg()
        </p>
    </div>


</div>
