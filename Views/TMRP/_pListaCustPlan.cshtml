@using System;
@using MyErp.Extensions;
@using MyErp.Resources
@inject LocService SharedLocalizer

@model VCXplanning
@functions {

    string [] Controller(string table){
        string [] retur = new string [4];
        switch (table)
        {
        case "CustPlan":
                retur[0]="TMRP";
                retur[1]="";
                retur[2]="";
                retur[3]="";
                break;
        case "MatReq":
                retur[0]="TMRP";
                retur[1]="";
                retur[2]="";
                retur[3]="";
                break;
        case "WCCap":
                retur[0]="TMRP";
                retur[1]="CapDetwc";  //Edit
                retur[2]="";  //Create
                retur[3]="";  //Delete
                break;
        case "WCDet":
                retur[0]="TMRP";
                retur[1]="";  //Edit
                retur[2]="";  //Create
                retur[3]="";  //Delete
                break;
        default:
            break;
        }
        return retur;
    }
    List<string> Columns(string table,int type){
        List<string> retur = new List<string>();
        switch (table)
        {
            case "CustPlan":
                if (type==0)
                {
                    retur.Add("CustPlan");
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("CustCode"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("PlantCode"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("RefInt"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("DescInt"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("DateFrom"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("DateTo"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Qty"));
                }
                else{
                    retur.Add("CplanId");
                    retur.Add("CplanCustCode");
                    retur.Add("CplanCplantCode");
                    retur.Add("CplanCprodRefInt");
                    retur.Add("CplanCprodDescInt");
                    retur.Add("CplanDateFrom");
                    retur.Add("CplanDateTo");
                    retur.Add("CplanQty");
                }
                break;
            case "MatReq":
                if (type==0)
                {
                    retur.Add("MatReq");
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("MatRefer"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("MatDescr"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("TcomQty"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("MatUnMed"));
                }
                else{
                    retur.Add("WcdId");
                    retur.Add("MatRefer");
                    retur.Add("MatDescr");
                    retur.Add("TcomQty");
                    retur.Add("MatUnMed");
                }
                break;
            case "WCCap":
                if (type==0)
                {
                    retur.Add("WCCap");
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("WCCode"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("WCDesc"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("OperTime"));
                }
                else{
                    retur.Add("RouWcId");
                    retur.Add("Wccode");
                    retur.Add("Wcdescr");
                    retur.Add("OperTime");
                }
                break;
            case "WCDet":
                if (type==0)
                {
                    retur.Add("WCCap");
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("ProdId"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Refer"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Descr"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Fase"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Oper"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Time"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Qty"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("UM"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("TotTime"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("WcId"));
                }
                else{
                    retur.Add("RouWcId");
                    retur.Add("expcomp");
                    retur.Add("matrefer");
                    retur.Add("matdescr");
                    retur.Add("roufase");
                    retur.Add("rouoper");
                    retur.Add("TTimes");
                    retur.Add("Qty");
                    retur.Add("matunmed");
                    retur.Add("TTime");
                    retur.Add("rouwcid");
                }
                break;
            default:
                break;
        }
        return retur;
    }
    IEnumerable<Container> getData_CustPlan(dynamic oTMaterial)
        {
            IEnumerable<VCCplanning> fTPersonal = (List<VCCplanning>)oTMaterial;
            IEnumerable<Container> TPersonal = fTPersonal.Select(
                f => new Container() 
                {
                        CampoId = f.CplanId,
                        Campo01 = f.CplanCustCode.ToString(),
                        Campo02 = f.CplanCplantCode.ToString(),
                        Campo03 = f.CplanCprodRefInt.ToString(),
                        Campo04 = f.CplanCprodDescInt.ToString(),
                        Campo05 = f.CplanDateFrom.ToString(),
                        Campo06 = f.CplanDateTo.ToString(), 
                        Campo07 = f.CplanQty.ToString(),
                        Campo08 = "",
                        Campo09 = "",
                        Campo10 = "",
                        Campo11 = "",
                        Campo12 = "",
                        Campo13 = "",
                        Campo14 = "",
                        Campo15 = ""
                });
            return TPersonal;
        }

    IEnumerable<Container> getData_MatReq(dynamic oTMaterial)
        {
            IEnumerable<TExpMater> fTPersonal = (List<TExpMater>)oTMaterial;
            IEnumerable<Container> TPersonal = fTPersonal.Select(
                f => new Container() 
                {
                        CampoId = 0,
                        Campo01 = f.MatRefer.ToString(),
                        Campo02 = f.MatDescr.ToString(),
                        Campo03 = f.TcomQty.ToString(),
                        Campo04 = f.MatUnMed.ToString(),
                        Campo05 = "",
                        Campo06 = "", 
                        Campo07 = "",
                        Campo08 = "",
                        Campo09 = "",
                        Campo10 = "",
                        Campo11 = "",
                        Campo12 = "",
                        Campo13 = "",
                        Campo14 = "",
                        Campo15 = ""
                });
            return TPersonal;
        }

    IEnumerable<Container> getData_WCCap(dynamic oTMaterial)
        {
            IEnumerable<TExpOper> fTPersonal = (List<TExpOper>)oTMaterial;
            IEnumerable<Container> TPersonal = fTPersonal.Select(
                f => new Container() 
                {
                        CampoId = f.RouWcId,
                        Campo01 = f.Wccode.ToString(),
                        Campo02 = f.Wcdescr.ToString(),
                        Campo03 = f.OperTime.ToString(),
                        Campo04 = "",
                        Campo05 = "",
                        Campo06 = "", 
                        Campo07 = "",
                        Campo08 = "",
                        Campo09 = "",
                        Campo10 = "",
                        Campo11 = "",
                        Campo12 = "",
                        Campo13 = "",
                        Campo14 = "",
                        Campo15 = ""
                });
            return TPersonal;
        }

    IEnumerable<Container> getData_WCDet(dynamic oTMaterial)
        {
            IEnumerable<TExpOperd> fTPersonal = (List<TExpOperd>)oTMaterial;
            IEnumerable<Container> TPersonal = fTPersonal.Select(
                f => new Container() 
                {
                        CampoId = 0,
                        Campo01 = f.expcomp.ToString(),
                        Campo02 = f.matrefer.ToString(), 
                        Campo03 = f.matdescr.ToString(),
                        Campo04 = f.roufase.ToString(),
                        Campo05 = f.rouoper.ToString(),
                        Campo06 = f.TTimes.ToString(),
                        Campo07 = f.Qty.ToString(),
                        Campo08 = f.matunmed.ToString(),
                        Campo09 = f.TTime.ToString(),
                        Campo10 = f.rouwcid.ToString(),
                        Campo11 = "",
                        Campo12 = "",
                        Campo13 = "",
                        Campo14 = "",
                        Campo15 = ""
                });
            return TPersonal;
        }




    string isVisible(int panel){
        string retcol="";
        int opanel = (int)ViewData["panel"];
        if (opanel==panel){retcol="visible";}
        else{retcol="invisible";}
        return retcol;
    }
    DateTime getDate(int date)
    {
        System.DateTime ret = System.DateTime.Now;
        if (date==1){
            try{
                ret = Convert.ToDateTime(ViewData["F1"].ToString());
            }
            catch{}
        }
        if (date==2){
            try{
                ret = Convert.ToDateTime(ViewData["F2"].ToString());
            }
            catch{}
        }
        return ret;
        }

    bool IntBool(int? value)
    {
        bool ret = true;
        if (value ==0||value == null){ret = false;}
        return ret;
    }
    bool getACSt()
    {
        bool ret = false;
        try{
            ret=Convert.ToBoolean(ViewData["ACSt"]);
        }
        catch{}
        return ret;
    }
    string sModel()
    {
        string ret ="";
        try{
        ret ="F1=\"";
        ret+=getDate(1).ToString();
        ret+="\"&F2=\"";
        ret+=getDate(2).ToString();
        ret+="\"&accStock=\"";
        ret+=getACSt().ToString();
        ret+="\"";}
        catch{}
        return ret;
    }

}

@using (Html.BeginForm()) {
   <div class="div-edit">
    @Html.ValidationSummary(true)
    
    @{
        try{
        Model.CplanDateFrom=getDate(1);
        Model.CplanDateTo=getDate(2);
        Model.CPlancStock=getACSt();}
        catch{}
    }
    
    <table class="table-edit">

        <tr>
            <td>@Html.LabelFor(p => p.CplanDateFrom,new { @class = "norm-lab-text",})</td>
            <td>@Html.EditorFor(p => p.CplanDateFrom, new { htmlAttributes = new {  @class = "norm-tb-text", @style = "width:200px" } })</td>
            <td>@Html.LabelFor(p => p.CplanDateTo,new { @class = "norm-lab-text",})</td>
            <td>@Html.EditorFor(p => p.CplanDateTo, new { htmlAttributes = new {  @class = "norm-tb-text", @style = "width:200px" } })</td>
            <td class="norm-lab-text">@SharedLocalizer.GetLocalizedHtmlString("AccountStocks")</td>
            <td>@Html.CheckBoxFor( p => p.CPlancStock,true )</td>
            <td><input type="submit" class="dropbtn" value="Go"  name="actionType"/></td>
        </tr>
        <tr>
            <td>
                <input type="hidden" value="2"  name="panel1"/>
            </td>
            <td>
                @Html.ValidationMessageFor(p => p.CplanDateFrom)
            </td>
            <td></td>
            <td>@Html.ValidationMessageFor(p => p.CplanDateTo)</td>
        </tr>
    </table>
    </div>

<div class=@isVisible(1)>

        <div class = "cont-titles">
            <h3>@SharedLocalizer.GetLocalizedHtmlString("PlanningData")</h3>   
        </div>
        @Html.dataGrid(35,12,@Columns("CustPlan",0),@getData_CustPlan((List<VCCplanning>)ViewBag.ListCustPlan),@Controller("CustPlan"),@Columns("CustPlan",1),0)
</div>

<div class=@isVisible(2)>


        <div class = "cont-titles">
            <h3>@SharedLocalizer.GetLocalizedHtmlString("MaterialRequirement")</h3>   
        </div>
        @Html.dataGrid(36,12,@Columns("MatReq",0),@getData_MatReq((List<TExpMater>)ViewBag.ListMatExp),@Controller("MatReq"),@Columns("MatReq",1),0)
</div>
<div class=@isVisible(3)>


        <div class = "cont-titles">
            <h3>@SharedLocalizer.GetLocalizedHtmlString("WorkCenterLoad")</h3>   
        </div>
        @Html.dataGrid(37,12,@Columns("WCCap",0),@getData_WCCap((List<TExpOper>)ViewBag.ListOpeExp),@Controller("WCCap"),@Columns("WCCap",1),0,"",true,true,"",@sModel())
</div>
<div class=@isVisible(4)>


        <div class = "cont-titles">
            <h3>@SharedLocalizer.GetLocalizedHtmlString("WorkCenterLoad")</h3>   
        </div>
        @Html.dataGrid(38,12,@Columns("WCDet",0),@getData_WCDet((List<TExpOperd>)ViewBag.ListOpeDet),@Controller("WCDet"),@Columns("WCDet",1),0)
</div>
}