
@using MyErp.Models
@model TCustomer
@using MyErp.Resources
@using MyErp.Extensions;
@inject LocService SharedLocalizer
@{
    Layout = null;  
    Layout = "_LayCus.cshtml";
}



@functions {


    string aparqsaction( )
    {
        int plant=0;
        int prod =0;
        try{
            plant =Convert.ToInt32(ViewData["Plant"].ToString());
        }
        catch{}
        try{
            prod =Convert.ToInt32(ViewData["Prod"].ToString());
        }
        catch{}
        string ret ="plant="+plant.ToString()+"&prod="+prod.ToString()+"&id=";
        return ret;
    }

    string [] Controller(string table){
        string [] retur = new string [4];
        switch (table)
        {
        case "Product":
                retur[0]="TCustomer";
                retur[1]="ProEdit";
                retur[2]="ProCreate";
                retur[3]="ProDelete";
                break;
        case "CPlant":
                retur[0]="TCustomer";
                retur[1]="PlantEdit";
                retur[2]="PlantCreate";
                retur[3]="PlantDelete";
                break;
        case "CPlann":
                retur[0]="TCustomer";
                retur[1]="PlanEdit";
                retur[2]="PlanCreate";
                retur[3]="PlanDelete";
                break;
        case "CPO":
                retur[0]="TCustomer";
                retur[1]="PoEdit";
                retur[2]="PoCreate";
                retur[3]="PoDelete";
                break;
        default:
            break;
        }
        return retur;
    }
    List<string> Columns(string table,int type){
        List<string> retur = new List<string>();
        switch (table)
        {
            case "Product":
                if (type==0)
                {
                    retur.Add("Product");
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Reference"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Descriptio"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Date Creation"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Status"));
                }
                else{
                    retur.Add("CprodId");
                    retur.Add("CprodRefInt");
                    retur.Add("CprodDescInt");
                    retur.Add("CprodCrDate");
                    retur.Add("CprodStatus");
                }
                break;
            case "CPlant":
                if (type==0)
                {
                    retur.Add("CPlant");
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Code"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Deno"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Address"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("City"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Ctry"));
                }
                else{
                    retur.Add("CplantId");
                    retur.Add("CplantCode");
                    retur.Add("CplantDeno");
                    retur.Add("CplantAdStrt");
                    retur.Add("CplantAdCity");
                    retur.Add("CplantAdCtry");
                }
                break;
            case "CPlann":
                if (type==0)
                {
                    retur.Add("CPlann");
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("RefInt"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("DescInt"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("DateFRom"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("DateTo"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Qty"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("FirmSt"));
                }
                else{
                    retur.Add("CplanId");
                    retur.Add("CprodRefInt");
                    retur.Add("CprodDescInt");
                    retur.Add("CplanDateFrom");
                    retur.Add("CplanDateTo");
                    retur.Add("CplanQty");
                    retur.Add("CplanFirmSt");
                }    
                break;
            case "CPO":
                if (type==0)
                {
                    retur.Add("CPO");
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("PO"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("RefEx"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("RefInt"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("DescEx"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Price"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Curcy"));
                    retur.Add(@SharedLocalizer.GetLocalizedHtmlString("Status"));
                }
                else{
                    retur.Add("Cpoid");
                    retur.Add("Cpopo");
                    retur.Add("CporeferEx");
                    retur.Add("CprodRefInt");
                    retur.Add("CpodescEx");
                    retur.Add("Cpoprice");
                    retur.Add("Cpocurcy");
                    retur.Add("Cpostatus");
                }    
                break;
            default:
                break;
        }
        return retur;
    }
    IEnumerable<Container> getData_Product(dynamic oTMaterial)
        {
            IEnumerable<TCCproduct> fTPersonal = (List<TCCproduct>)oTMaterial;
            IEnumerable<Container> TPersonal = fTPersonal.Select(
                f => new Container() 
                {
                        CampoId = f.CprodId,
                        Campo01 = f.CprodRefInt.ToString(),
                        Campo02 = f.CprodDescInt.ToString(),
                        Campo03 = string.Format("{0:dd-MM-yyyy}", f.CprodCrDate),
                        Campo04 = f.CprodStatus.ToString(),
                        Campo05 = "",
                        Campo06 = "",
                        Campo07 = "",
                        Campo08 = "",
                        Campo09 = "",
                        Campo10 = "",
                        Campo11 = "",
                        Campo12 = "",
                        Campo13 = "",
                        Campo14 = "",
                        Campo15 = ""
                });
            return TPersonal;
        }
    IEnumerable<Container> getData_CPlant(dynamic oTMaterial)
        {
            IEnumerable<TCCplant> fTPersonal = (List<TCCplant>)oTMaterial;
            IEnumerable<Container> TPersonal = fTPersonal.Select(
                f => new Container() 
                {
                        CampoId = f.CplantId,
                        Campo01 = f.CplantCode.ToString(),
                        Campo02 = f.CplantDeno.ToString(),
                        Campo03 = f.CplantAdStrt.ToString(),
                        Campo04 = f.CplantAdCity.ToString(),
                        Campo05 = f.CplantAdCtry.ToString(),
                        Campo06 = "", 
                        Campo07 = "",
                        Campo08 = "",
                        Campo09 = "",
                        Campo10 = "",
                        Campo11 = "",
                        Campo12 = "",
                        Campo13 = "",
                        Campo14 = "",
                        Campo15 = ""
                });
            return TPersonal;
        }

    IEnumerable<Container> getData_CPlann(dynamic oTMaterial)
        {
            IEnumerable<VTCCplanning> fTPersonal = (List<VTCCplanning>)oTMaterial;
            IEnumerable<Container> TPersonal = fTPersonal.Select(
                f => new Container() 
                {
                        CampoId = f.CplanId,
                        Campo01 = f.CprodRefInt.ToString(),
                        Campo02 = f.CprodDescInt.ToString(),
                        Campo03 = string.Format("{0:dd-MM-yyyy}", f.CplanDateFrom),
                        Campo04 = string.Format("{0:dd-MM-yyyy}", f.CplanDateTo),
                        Campo05 = f.CplanQty.ToString(),
                        Campo06 = f.CplanFirmSt.ToString(),
                        Campo07 = "",
                        Campo08 = "",
                        Campo09 = "",
                        Campo10 = "",
                        Campo11 = "",
                        Campo12 = "",
                        Campo13 = "",
                        Campo14 = "",
                        Campo15 = ""
                });
            return TPersonal;
        }

    IEnumerable<Container> getData_CPO(dynamic oTMaterial)
        {
            IEnumerable<VTCPorder> fTPersonal = (List<VTCPorder>)oTMaterial;
            IEnumerable<Container> TPersonal = fTPersonal.Select(
                f => new Container() 
                {
                        CampoId = f.Cpoid,
                        Campo01 = f.Cpopo.ToString(),
                        Campo02 = f.CporeferEx.ToString(),
                        Campo03 = f.CprodRefInt.ToString(),
                        Campo04 = f.CpodescEx.ToString(),
                        Campo05 = f.Cpoprice.ToString(),
                        Campo06 = f.Cpocurcy.ToString(), 
                        Campo07 = f.Cpostatus.ToString(),
                        Campo08 = "",
                        Campo09 = "",
                        Campo10 = "",
                        Campo11 = "",
                        Campo12 = "",
                        Campo13 = "",
                        Campo14 = "",
                        Campo15 = ""
                });
            return TPersonal;
        }



        string panelBold(int panel)
    {            
        int tpan = (int)ViewData["panel"];
        string cstyle ="";
        if (panel==tpan)
        {cstyle="font-weight:bold";}
        return cstyle;
    }

    string isVisible(int panel){
        string retcol="";
        int opanel = (int)ViewData["panel"];
        if (opanel==panel){retcol="visible";}
        else{retcol="invisible";}
        return retcol;
    }
    int thisPanel(){
         int opanel = (int)ViewData["panel"];
         return opanel;
    }
    bool chkAllpp()
    {
        bool ret = false;
        try{
            ret = Convert.ToBoolean(ViewData["Allpp"].ToString());
        }
        catch{}
        return ret;
    }
}

<script>
    function chkAllsubmit(modulo)
    {
        var e = document.getElementById(modulo);
        var value = e.checked;
        var urlstr =window.location.href;
        const pathn = window.location.pathname;
        const querystring = window.location.search;
        const params = new URLSearchParams(querystring);
        params.set(e.name.toString(),value.toString());
        var new_url=window.location.protocol+"//"+window.location.hostname+":"+window.location.port+pathn.toString()+"?"+params.toString();
        window.location.href = new_url;
    }
    function selectPlant(modulo,panel)
    {
        //hace un httpget en este modulo para cargar el ViweData correspondiente
        var e = document.getElementById(modulo);
        var value = e.options[e.selectedIndex].WcoId;
        var url=window.location.href.split("?")[0];
        url=url+"?"+e.name+"="+e.value.toString()+"&panel="+panel.toString();
        window.location.href = url;

    }

    function selectPlantProd(planta,produ,panel)
    {
        //hace un httpget en este modulo para cargar el ViweData correspondiente
        var e = document.getElementById(planta);
        var value = e.options[e.selectedIndex].WcoId;

        var f = document.getElementById(produ);
        var falue = f.options[f.selectedIndex].WcoId;

        var url=window.location.href.split("?")[0];
        url=url+"?"+e.name+"="+e.value.toString()+"&"+f.name+"="+f.value.toString()+"&panel="+panel.toString();
        window.location.href = url;

    }
</script>


@using (Html.BeginForm("Edit","TCustomer",FormMethod.Post)) {        
@*@using (Html.BeginForm()) {*@
    @Html.HiddenFor(p => p.CustId)
    @Html.ValidationSummary(true)
    <div class=@isVisible(1)>
    <div class="div-edit">
    <table class="table-edit">
        <div class="style-data">
        <h3>@SharedLocalizer.GetLocalizedHtmlString("CustomerData")</h3>        
        </div>
        <tr>
            <td><input type="submit" class="dropbtn" value="Update"name="actionType"/></td>
            <td><input type="submit" class="dropbtn" value="Cancel"  name="actionType"/></td>
        </tr>
        <tr>
            <td>@Html.LabelFor(p => p.CustRasoc,new { @class = "norm-lab-text",})</td>
            <td>@Html.EditorFor(p => p.CustRasoc, new { htmlAttributes = new { @class = "norm-tb-text", @style = "width:450px"} })</td>
        </tr>
        <tr>
            <td></td>
            <td>@Html.ValidationMessageFor(p => p.CustRasoc)</td>
        </tr>
        <tr>
            <td>@Html.LabelFor(p => p.CustNif,new { @class = "norm-lab-text",})</td>
            <td>@Html.EditorFor(p => p.CustNif, new { htmlAttributes = new { @class = "norm-tb-text", @style = "width:150px"} })</td>
        </tr>
        <tr>
            <td></td>
            <td>@Html.ValidationMessageFor(p => p.CustNif)</td>
        </tr>
        <tr>
            <td>@Html.LabelFor(p => p.CustCrDate,new { @class = "norm-lab-text",})</td>
            <td>@Html.EditorFor(p => p.CustCrDate, new { htmlAttributes = new { @class = "norm-tb-text"} })</td>
        </tr>
        <tr>
            <td></td>
            <td>@Html.ValidationMessageFor(p => p.CustCrDate)</td>
        </tr>
        <tr>
            <td>@Html.LabelFor(p => p.CustCode,new { @class = "norm-lab-text",})</td>
            <td>@Html.EditorFor(p => p.CustCode, new { htmlAttributes = new { @class = "norm-tb-text", @style = "width:250px"} })</td>
        </tr>
        <tr>
            <td></td>
            <td>@Html.ValidationMessageFor(p => p.CustCode)</td>
        </tr>
        <tr>
            <td>@Html.LabelFor(p => p.CustAdStrt,new { @class = "norm-lab-text",})</td>
            <td>@Html.EditorFor(p => p.CustAdStrt, new { htmlAttributes = new { @class = "norm-tb-text", @style = "width:450px"} })</td>
            <td>@Html.LabelFor(p => p.CustAdCity,new { @class = "norm-lab-text",})</td>
            <td>@Html.EditorFor(p => p.CustAdCity, new { htmlAttributes = new { @class = "norm-tb-text", @style = "width:300px"} })</td>
        </tr>
        <tr>
            <td></td>
            <td>@Html.ValidationMessageFor(p => p.CustAdStrt)</td>
            <td></td>
            <td>@Html.ValidationMessageFor(p => p.CustAdCity)</td>
        </tr>
        <tr>
            <td>@Html.LabelFor(p => p.CustAdCtry,new { @class = "norm-lab-text",})</td>
            <td>
                @Html.DropDownListFor(p => p.CustAdCtry,
               new SelectList(DataSource.GetCountry(), "Code", "Name"),new { @class = "norm-tb-text" })
            </td>
            <td>@Html.LabelFor(p => p.CustCtPhone,new { @class = "norm-lab-text",})</td>
            <td>@Html.EditorFor(p => p.CustCtPhone, new { htmlAttributes = new { @class = "norm-tb-text", @style = "width:200px"} })</td>
        </tr>
        <tr>
            <td></td>
            <td>@Html.ValidationMessageFor(p => p.CustAdCtry)</td>
            <td></td>
            <td>@Html.ValidationMessageFor(p => p.CustCtPhone)</td>
        </tr>
        <tr>
            <td>@Html.LabelFor(p => p.CustCtEmailLog,new { @class = "norm-lab-text",})</td>
            <td>@Html.EditorFor(p => p.CustCtEmailLog, new { htmlAttributes = new { @class = "norm-tb-text", @style = "width:250px"} })</td>
            <td>@Html.LabelFor(p => p.CustCtEdilog,new { @class = "norm-lab-text",})</td>
            <td>@Html.EditorFor(p => p.CustCtEdilog, new { htmlAttributes = new { @class = "norm-tb-text", @style = "width:250px"} })</td>
        </tr>
        <tr>
            <td></td>
            <td>@Html.ValidationMessageFor(p => p.CustCtEmailLog)</td>
            <td></td>
            <td>@Html.ValidationMessageFor(p => p.CustCtEdilog)</td>
        </tr>
    </table>
    </div>
    </div>
    <div class=@isVisible(2)>

        <table class="table-edit" border="1">
            <div class="cont-titles">
                <h3 class="style-data">@SharedLocalizer.GetLocalizedHtmlString("ProductData")</h3>
            </div>
            <div  class="_container" name="aqui-el-control-grid-3">
                @Html.dataGrid(35,9,@Columns("Product",0),@getData_Product((List<TCCproduct>)ViewBag.ListProd),@Controller("Product"),@Columns("Product",1),Model.CustId)
            </div>
        </table>
    </div>
    <div class=@isVisible(3)>

        <table class="table-edit" border="1">
            <div class="cont-titles">
                <h3 class="style-data">@SharedLocalizer.GetLocalizedHtmlString("PlanttData")</h3>
            </div>
            <div  class="_container" name="aqui-el-control-grid-3">
                @Html.dataGrid(36,9,@Columns("CPlant",0),@getData_CPlant((List<TCCplant>)ViewBag.ListPlant),@Controller("CPlant"),@Columns("CPlant",1),Model.CustId)
            </div>
        </table>
    </div>  
    <div class=@isVisible(4)>
        <table class="table-edit" border="1">
            <div class="cont-titles">
                <h3 class="style-data">@SharedLocalizer.GetLocalizedHtmlString("PlanningData")</h3>
            </div>
            @using (Html.BeginForm("Edit","TCustomer",FormMethod.Get)) {
            <table>
                <tr>
                    <td class="norm-lab-text">@SharedLocalizer.GetLocalizedHtmlString("Plant")<input type="hidden" name="CustId" value="@(Model.CustId)"/></td>
                    <td class="norm-text">
                        @Html.DropDownList("plant", (SelectList)ViewBag.ddlPlantVB, new { @id="xplant", @class ="norm-tb-text" , onchange = "selectPlantProd('xplant','_prod',4)" })
                                            @*CplantId*@
                    </td>
@*
                </tr>
                <tr>
*@
                    <td class="norm-lab-text">@SharedLocalizer.GetLocalizedHtmlString("Reference") :</td>
                    <td class="norm-text">
                        @Html.DropDownList("prod", (SelectList)ViewBag.ddlReferVO, new { @id="_prod" , @class ="norm-tb-text" , onchange = "selectPlantProd('xplant','_prod',4)"  })
                                            @*CprodId*@
                    </td>            
                    <td class="norm-lab-text">@SharedLocalizer.GetLocalizedHtmlString("AllPlantProds")</td>
                    <td>@Html.CheckBox( "allpprods",@chkAllpp() , new { @id="_cbapp" , @class ="norm-tb-text" , onchange = "chkAllsubmit('_cbapp')"  })</td>
                    <td>
                        <input type="hidden" name="panel" value="@thisPanel()"/>
                    </td>
                </tr>
            </table>
            

            <div  class="_container" name="aqui-el-control-grid-3">
                @Html.dataGrid(37,9,@Columns("CPlann",0),@getData_CPlann((List<VTCCplanning>)ViewBag.ListPlan),@Controller("CPlann"),@Columns("CPlann",1),Model.CustId,@aparqsaction(),true,true,"EditPlann")
            </div>
            }
        </table>
    </div>    
    <div class=@isVisible(5)>
        <table class="table-edit" border="1">
            <div class="cont-titles">
                <h3 class="style-data">@SharedLocalizer.GetLocalizedHtmlString("PlanningData")</h3>
            </div>
            @*@using (Html.BeginForm("Edit","TCustomer",FormMethod.Post)) {        *@
            <table>
                    <td>
                        <input type="hidden" name="CustId" value="@(Model.CustId)"/>
                        <input type="hidden" name="panel" value="@thisPanel()"/>
                    </td>
                    <td class="norm-lab-text">@SharedLocalizer.GetLocalizedHtmlString("Plant")</td>
                    <td class="norm-text">
                     @Html.DropDownList("plant", (SelectList)ViewBag.ddlPlantVB, new { @id="_plant", @class ="norm-tb-text" , onchange = "selectPlant('_plant',5)" })
                                            @*CPlantId*@
                  </td>
            </table>
        @*    }*@
            <div  class="_container" name="aqui-el-control-grid-3">
                @Html.dataGrid(38,9,@Columns("CPO",0),@getData_CPO((List<VTCPorder>)ViewBag.listPO),@Controller("CPO"),@Columns("CPO",1),Model.CustId,@aparqsaction())
            </div>
        </table>
    </div>    
}